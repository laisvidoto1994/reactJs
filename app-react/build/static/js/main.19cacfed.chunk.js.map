{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","components/counter.jsx","components/counters.jsx","index.js"],"names":["module","exports","__webpack_require__","p","MyBotao","_this","this","react_default","a","createElement","onClick","props","funcaoClick","label","Component","MyLabel","text","Boolean","window","location","hostname","match","Counter","state","value","imageUrl","dados","estilo","fontSize","fontWeight","handleIncrement","setState","length","map","tag","key","className","style","formatCount","onDelete","Counters","counters","id","handleDelete","console","log","_this2","counter","components_counter","selected","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCKlCC,gMACK,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,UACEC,QAAS,WAAQL,EAAKM,MAAMC,YAAYP,EAAKM,MAAME,SAElDP,KAAKK,MAAME,cANEC,cAYhBC,mLAGF,OAAOR,EAAAC,EAAAC,cAAA,wBAAgBH,KAAKK,MAAMK,aAHhBF,aAUJA,YCfEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DC4CSC,6MA1DXC,MAAQ,CACPC,MAAOnB,EAAKM,MAAMa,MAClBC,SAAU,8EACVC,MAAO,CAAC,OAAO,OAAO,WAGvBC,OAAS,CACPC,SAAU,GACVC,WAAY,UAsBdC,gBAAkB,WAChBzB,EAAK0B,SAAS,CAAEP,MAAOnB,EAAKkB,MAAMC,MAAQ,kFApB9B,IAEHA,EAAUlB,KAAKiB,MAAfC,MACGjB,EAAAC,EAAAC,cAAA,kBAGV,OAAiB,IAAVe,EAAc,OAAQA,uCAK/B,OAA+B,IAA5BlB,KAAKiB,MAAMG,MAAMM,OAAqB,sBAGvCzB,EAAAC,EAAAC,cAAA,UAAMH,KAAKiB,MAAMG,MAAMO,IAAK,SAAAC,GAAG,OAAI3B,EAAAC,EAAAC,cAAA,MAAI0B,IAAKD,GAAOA,uCAWrD,OACE3B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,6BAOb7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAM2B,UAAU,eAAeC,MAAQ/B,KAAKqB,QAAWrB,KAAKgC,eAC5D/B,EAAAC,EAAAC,cAAA,UAAQ2B,UAAU,WAAW1B,QAAUJ,KAAKwB,iBAA5C,aACAvB,EAAAC,EAAAC,cAAA,UAAQ2B,UAAU,2BAA0B1B,QAAUJ,KAAKK,MAAM4B,UAAjE,UACAhC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,oBAlDKK,aC6BP0B,6MA1BXjB,MAAQ,CACJkB,SAAU,CACN,CAAEC,GAAI,EAAGlB,MAAO,GAChB,CAAEkB,GAAI,EAAGlB,MAAO,GAChB,CAAEkB,GAAI,EAAGlB,MAAO,GAChB,CAAEkB,GAAI,EAAGlB,MAAO,OAIxBmB,aAAe,WACXC,QAAQC,IAAI,wFAIP,IAAAC,EAAAxC,KACP,OACEC,EAAAC,EAAAC,cAAA,WACMH,KAAKiB,MAAMkB,SAASR,IAAK,SAAAc,GAAO,OAC9BxC,EAAAC,EAAAC,cAACuC,EAAD,CAASb,IAAMY,EAAQL,GAAMH,SAAWO,EAAKH,aAAenB,MAAQuB,EAAQvB,MAAQyB,UAAW,EAAOP,GAAKK,EAAQL,eApB5G5B,aCMvBoC,IAASC,OAAO5C,EAAAC,EAAAC,cAACgC,EAAD,MAAcW,SAASC,eAAe,SHwHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.19cacfed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n{/* https://www.youtube.com/watch?v=ghEdUzwRsHo */ }\nclass MyBotao extends Component {\n  render() {\n    return (\n      <button\n        onClick={() => { this.props.funcaoClick(this.props.label); }}\n      >\n        {this.props.label}\n      </button>\n    );\n  }\n}\n \nclass MyLabel extends Component {\n  render() {\n    {/* this.props.text-> ele pega o texto que eu passar no html */ }\n    return <p>Cliquei no: {this.props.text}</p>\n\n  }\n}\n \n\n{/* tem obrigação da classe app herdar de Component do React */ }\nclass App extends Component {\n  /* this.state */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      labelText: '',\n    };\n  }\n\n  setLabelText = (labelText) => {\n    this.setState({ labelText: labelText });\n  }\n\n  render() {\n    {/* render é para reenderizar, e retornar o que quer */ }\n    return (\n      <div className=\"App\">\n        {/*\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\" >\n            Learn React\n          </a>\n        </header>\n      */}\n\n        <div>\n\n          <h1>Exercicio de ReactJs</h1>\n  \n          {/* Chamando á classe do butão */}\n          <MyLabel text={this.state.labelText} />\n\n          <MyBotao funcaoClick={this.setLabelText} label=\"Botão 1\" />\n          <MyBotao funcaoClick={this.setLabelText} label=\"Botão 2\" />\n          <MyBotao funcaoClick={this.setLabelText} label=\"Botão 3\" />\n          <MyBotao funcaoClick={this.setLabelText} label=\"Botão 4\" />\n        </div>\n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'; \r\n \r\nclass Counter extends Component {\r\n  \r\n    state = {\r\n     value: this.props.value,\r\n     imageUrl: 'https://png.pngtree.com/element_origin_min_pic/16/11/20/185831763f61465.jpg',\r\n     dados: ['tag1','tag2','tag3']\r\n    };\r\n    \r\n    estilo = {\r\n      fontSize: 20,     \r\n      fontWeight: 'bold'\r\n    };\r\n   \r\n    formatCount() {\r\n  \r\n        const{ value } = this.state;    \r\n        const x = <h1>Zero</h1>;\r\n    \r\n        {/* retorne á string 'zero', se o parametro count conter o numero 0 */}\r\n        return value === 0 ? \"Zero\": value;\r\n    }\r\n\r\n    renderTags(){\r\n  \r\n      if(this.state.dados.length === 0) return 'não há dados!';\r\n  \r\n      return ( \r\n        <ul>{ this.state.dados.map( tag => <li key={tag}>{ tag }</li> ) }</ul>\r\n      );\r\n    }\r\n  \r\n    /* Incrementando dinamicamente o valor do contador, clicando no botão */\r\n    handleIncrement = () => { \r\n      this.setState({ value: this.state.value + 1 });\r\n    };\r\n \r\n    render() {  \r\n\r\n      return ( \r\n        <div className=\"espacamento1 espacamento3\"> \r\n            {/*\r\n           <div> \r\n            { this.state.dados.length === 0 && \"Por favor, insira dados!\" }\r\n            { this.renderTags() }  \r\n          </div>\r\n          */}\r\n          <div>   \r\n            <span className=\"espacamento2\" style={ this.estilo }>{ this.formatCount() }</span> \r\n            <button className=\"corCinza\" onClick={ this.handleIncrement }>Increment</button>    \r\n            <button className=\"espacamento3 corVermelho\"onClick={ this.props.onDelete }>delete</button> \r\n            <br/><br/>\r\n            {/*\r\n                <img src={ this.state.imageUrl } alt=\"imagem\"/>\r\n            */}\r\n          </div>\r\n        </div>\r\n      );\r\n    }  \r\n}\r\n \r\nexport default Counter;","import React, { Component } from 'react';  \r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component {\r\n\r\n    state = { \r\n        counters: [\r\n            { id: 1, value: 4 },\r\n            { id: 2, value: 0 },\r\n            { id: 3, value: 0 },\r\n            { id: 4, value: 0 }\r\n        ]\r\n    }\r\n    \r\n    handleDelete = () =>{\r\n        console.log(\"passou aqui\");\r\n\r\n    } \r\n\r\n    render() {  \r\n      return (\r\n        <div> \r\n            { this.state.counters.map( counter=> (\r\n                <Counter key={ counter.id }  onDelete={ this.handleDelete } value={ counter.value } selected={ true } id={ counter.id }>   \r\n                </Counter> \r\n            ) )}\r\n        </div>\r\n      );\r\n    }\r\n  } \r\n  \r\nexport default Counters;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n \nimport Counters  from \"./components/counters\";\nimport Counter  from \"./components/counter\";\n\nReactDOM.render(<Counters />, document.getElementById('root'));\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}